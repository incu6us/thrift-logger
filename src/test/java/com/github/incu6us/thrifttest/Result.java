/**
 * Autogenerated by Thrift Compiler (0.14.0)
 * <p>
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 * @generated
 */
package com.github.incu6us.thrifttest;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.14.0)", date = "2020-02-07")
public class Result implements org.apache.thrift.TBase<Result, Result._Fields>, java.io.Serializable, Cloneable, Comparable<Result> {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Result");

    private static final org.apache.thrift.protocol.TField IS_SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("isSuccess", org.apache.thrift.protocol.TType.BOOL, (short) 1);
    private static final org.apache.thrift.protocol.TField DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("data", org.apache.thrift.protocol.TType.STRING, (short) 2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ResultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ResultTupleSchemeFactory();

    public boolean isSuccess; // optional
    public @org.apache.thrift.annotation.Nullable
    String data; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
        IS_SUCCESS((short) 1, "isSuccess"),
        DATA((short) 2, "data");

        private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

        static {
            for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                byName.put(field.getFieldName(), field);
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, or null if its not found.
         */
        @org.apache.thrift.annotation.Nullable
        public static _Fields findByThriftId(int fieldId) {
            switch (fieldId) {
                case 1: // IS_SUCCESS
                    return IS_SUCCESS;
                case 2: // DATA
                    return DATA;
                default:
                    return null;
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, throwing an exception
         * if it is not found.
         */
        public static _Fields findByThriftIdOrThrow(int fieldId) {
            _Fields fields = findByThriftId(fieldId);
            if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
            return fields;
        }

        /**
         * Find the _Fields constant that matches name, or null if its not found.
         */
        @org.apache.thrift.annotation.Nullable
        public static _Fields findByName(String name) {
            return byName.get(name);
        }

        private final short _thriftId;
        private final String _fieldName;

        _Fields(short thriftId, String fieldName) {
            _thriftId = thriftId;
            _fieldName = fieldName;
        }

        public short getThriftFieldId() {
            return _thriftId;
        }

        public String getFieldName() {
            return _fieldName;
        }
    }

    // isset id assignments
    private static final int __ISSUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    private static final _Fields optionals[] = {_Fields.IS_SUCCESS};
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

    static {
        java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
        tmpMap.put(_Fields.IS_SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("isSuccess", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
        tmpMap.put(_Fields.DATA, new org.apache.thrift.meta_data.FieldMetaData("data", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
        org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Result.class, metaDataMap);
    }

    public Result() {
    }

    public Result(
            String data) {
        this();
        this.data = data;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Result(Result other) {
        __isset_bitfield = other.__isset_bitfield;
        this.isSuccess = other.isSuccess;
        if (other.isSetData()) {
            this.data = other.data;
        }
    }

    public Result deepCopy() {
        return new Result(this);
    }

    @Override
    public void clear() {
        setIsSuccessIsSet(false);
        this.isSuccess = false;
        this.data = null;
    }

    public boolean isIsSuccess() {
        return this.isSuccess;
    }

    public Result setIsSuccess(boolean isSuccess) {
        this.isSuccess = isSuccess;
        setIsSuccessIsSet(true);
        return this;
    }

    public void unsetIsSuccess() {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISSUCCESS_ISSET_ID);
    }

    /** Returns true if field isSuccess is set (has been assigned a value) and false otherwise */
    public boolean isSetIsSuccess() {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISSUCCESS_ISSET_ID);
    }

    public void setIsSuccessIsSet(boolean value) {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISSUCCESS_ISSET_ID, value);
    }

    @org.apache.thrift.annotation.Nullable
    public String getData() {
        return this.data;
    }

    public Result setData(@org.apache.thrift.annotation.Nullable String data) {
        this.data = data;
        return this;
    }

    public void unsetData() {
        this.data = null;
    }

    /** Returns true if field data is set (has been assigned a value) and false otherwise */
    public boolean isSetData() {
        return this.data != null;
    }

    public void setDataIsSet(boolean value) {
        if (!value) {
            this.data = null;
        }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
        switch (field) {
            case IS_SUCCESS:
                if (value == null) {
                    unsetIsSuccess();
                } else {
                    setIsSuccess((Boolean) value);
                }
                break;

            case DATA:
                if (value == null) {
                    unsetData();
                } else {
                    setData((String) value);
                }
                break;

        }
    }

    @org.apache.thrift.annotation.Nullable
    public Object getFieldValue(_Fields field) {
        switch (field) {
            case IS_SUCCESS:
                return isIsSuccess();

            case DATA:
                return getData();

        }
        throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
        if (field == null) {
            throw new IllegalArgumentException();
        }

        switch (field) {
            case IS_SUCCESS:
                return isSetIsSuccess();
            case DATA:
                return isSetData();
        }
        throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
        if (that instanceof Result)
            return this.equals((Result) that);
        return false;
    }

    public boolean equals(Result that) {
        if (that == null)
            return false;
        if (this == that)
            return true;

        boolean this_present_isSuccess = true && this.isSetIsSuccess();
        boolean that_present_isSuccess = true && that.isSetIsSuccess();
        if (this_present_isSuccess || that_present_isSuccess) {
            if (!(this_present_isSuccess && that_present_isSuccess))
                return false;
            if (this.isSuccess != that.isSuccess)
                return false;
        }

        boolean this_present_data = true && this.isSetData();
        boolean that_present_data = true && that.isSetData();
        if (this_present_data || that_present_data) {
            if (!(this_present_data && that_present_data))
                return false;
            if (!this.data.equals(that.data))
                return false;
        }

        return true;
    }

    @Override
    public int hashCode() {
        int hashCode = 1;

        hashCode = hashCode * 8191 + ((isSetIsSuccess()) ? 131071 : 524287);
        if (isSetIsSuccess())
            hashCode = hashCode * 8191 + ((isSuccess) ? 131071 : 524287);

        hashCode = hashCode * 8191 + ((isSetData()) ? 131071 : 524287);
        if (isSetData())
            hashCode = hashCode * 8191 + data.hashCode();

        return hashCode;
    }

    @Override
    public int compareTo(Result other) {
        if (!getClass().equals(other.getClass())) {
            return getClass().getName().compareTo(other.getClass().getName());
        }

        int lastComparison = 0;

        lastComparison = Boolean.compare(isSetIsSuccess(), other.isSetIsSuccess());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetIsSuccess()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isSuccess, other.isSuccess);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.compare(isSetData(), other.isSetData());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetData()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.data, other.data);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
        return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
        scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
        scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("Result(");
        boolean first = true;

        if (isSetIsSuccess()) {
            sb.append("isSuccess:");
            sb.append(this.isSuccess);
            first = false;
        }
        if (!first) sb.append(", ");
        sb.append("data:");
        if (this.data == null) {
            sb.append("null");
        } else {
            sb.append(this.data);
        }
        first = false;
        sb.append(")");
        return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
        // check for required fields
        // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
        try {
            write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
        try {
            // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
            __isset_bitfield = 0;
            read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private static class ResultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
        public ResultStandardScheme getScheme() {
            return new ResultStandardScheme();
        }
    }

    private static class ResultStandardScheme extends org.apache.thrift.scheme.StandardScheme<Result> {

        public void read(org.apache.thrift.protocol.TProtocol iprot, Result struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TField schemeField;
            iprot.readStructBegin();
            while (true) {
                schemeField = iprot.readFieldBegin();
                if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                    break;
                }
                switch (schemeField.id) {
                    case 1: // IS_SUCCESS
                        if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                            struct.isSuccess = iprot.readBool();
                            struct.setIsSuccessIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 2: // DATA
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.data = iprot.readString();
                            struct.setDataIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be checked in the validate method
            struct.validate();
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot, Result struct) throws org.apache.thrift.TException {
            struct.validate();

            oprot.writeStructBegin(STRUCT_DESC);
            if (struct.isSetIsSuccess()) {
                oprot.writeFieldBegin(IS_SUCCESS_FIELD_DESC);
                oprot.writeBool(struct.isSuccess);
                oprot.writeFieldEnd();
            }
            if (struct.data != null) {
                oprot.writeFieldBegin(DATA_FIELD_DESC);
                oprot.writeString(struct.data);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

    }

    private static class ResultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
        public ResultTupleScheme getScheme() {
            return new ResultTupleScheme();
        }
    }

    private static class ResultTupleScheme extends org.apache.thrift.scheme.TupleScheme<Result> {

        @Override
        public void write(org.apache.thrift.protocol.TProtocol prot, Result struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            java.util.BitSet optionals = new java.util.BitSet();
            if (struct.isSetIsSuccess()) {
                optionals.set(0);
            }
            if (struct.isSetData()) {
                optionals.set(1);
            }
            oprot.writeBitSet(optionals, 2);
            if (struct.isSetIsSuccess()) {
                oprot.writeBool(struct.isSuccess);
            }
            if (struct.isSetData()) {
                oprot.writeString(struct.data);
            }
        }

        @Override
        public void read(org.apache.thrift.protocol.TProtocol prot, Result struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            java.util.BitSet incoming = iprot.readBitSet(2);
            if (incoming.get(0)) {
                struct.isSuccess = iprot.readBool();
                struct.setIsSuccessIsSet(true);
            }
            if (incoming.get(1)) {
                struct.data = iprot.readString();
                struct.setDataIsSet(true);
            }
        }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
        return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
}

